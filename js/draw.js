// Generated by CoffeeScript 1.6.3
(function() {
  this.draw = function(N, K, data) {
    graph(N, K, data);
    return po(N, K, data);
  };

  this.po = function(N, K, data) {
    var d, f, graphHeight, graphWidth, i, l, link, linkDist, maximum, maximumY, numLink, p, poisson, real, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref;
    f = function(n) {
      var i, m, _i;
      if (n === 0) {
        return 1;
      }
      m = 1;
      for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
        m *= i;
      }
      return m;
    };
    numLink = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= N ? _i < N : _i > N; i = 0 <= N ? ++_i : --_i) {
        _results.push(0);
      }
      return _results;
    })();
    _ref = data.links;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      link = _ref[_i];
      numLink[link.target.index]++;
      numLink[link.source.index]++;
    }
    maximum = 0;
    for (_j = 0, _len1 = numLink.length; _j < _len1; _j++) {
      d = numLink[_j];
      maximum = Math.max(maximum, d);
    }
    maximum += 3;
    linkDist = (function() {
      var _k, _results;
      _results = [];
      for (i = _k = 0; 0 <= maximum ? _k <= maximum : _k >= maximum; i = 0 <= maximum ? ++_k : --_k) {
        _results.push(0);
      }
      return _results;
    })();
    for (_k = 0, _len2 = numLink.length; _k < _len2; _k++) {
      d = numLink[_k];
      linkDist[d]++;
    }
    maximumY = 0;
    for (i = _l = 0, _len3 = linkDist.length; _l < _len3; i = ++_l) {
      d = linkDist[i];
      linkDist[i] = [i, d];
      maximumY = Math.max(maximumY, d);
    }
    poisson = [];
    for (i = _m = 0; 0 <= maximum ? _m <= maximum : _m >= maximum; i = 0 <= maximum ? ++_m : --_m) {
      p = N * (Math.pow(K, i) * Math.pow(2.718, -K)) / f(i);
      poisson.push([i, p]);
    }
    maximumY = Math.max(poisson[K][1], maximumY);
    graphWidth = 500 / (maximum + 1);
    graphHeight = 300 / maximumY;
    for (_n = 0, _len4 = linkDist.length; _n < _len4; _n++) {
      l = linkDist[_n];
      console.log(graphHeight * l[1]);
    }
    real = d3.select("#real").selectAll("div").data(linkDist).enter().append("div").attr("class", "bar").style("left", function(d) {
      return graphWidth * d[0] + "px";
    }).style("bottom", 0).style("width", graphWidth + "px").style("height", function(d) {
      return graphHeight * d[1] + "px";
    });
    real.append("div").text(function(d) {
      return d[0];
    }).attr("class", "axis").style("width", graphWidth + "px");
    return d3.select("#po").selectAll("div").data(poisson).enter().append("div").attr("class", "poisson").style("left", function(d) {
      return graphWidth * d[0] + "px";
    }).style("bottom", 0).style("width", graphWidth + "px").style("height", function(d) {
      return graphHeight * d[1] + "px";
    });
  };

  this.graph = function(N, K, data) {
    var force, height, link, node, svg, width;
    width = 500;
    height = 400;
    force = d3.layout.force().charge(-5000 * K / N).linkDistance(30).size([width, height]);
    svg = d3.select('#graph').append('svg').attr('width', width).attr('height', height);
    force.nodes(data.nodes).links(data.links).start();
    link = svg.selectAll(".link").data(data.links).enter().append("line").attr("class", "link").style("stroke-width", function(d) {
      return 1;
    });
    node = svg.selectAll(".node").data(data.nodes).enter().append("circle").attr("class", "node").attr("r", Math.max(1, Math.min(1000 / N, 30))).style("fill", function(d) {
      return "#76C9C8";
    }).call(force.drag);
    node.append("title").text(function(d) {
      return d.name;
    });
    return force.on("tick", function() {
      link.attr("x1", function(d) {
        return d.source.x;
      });
      link.attr("y1", function(d) {
        return d.source.y;
      });
      link.attr("x2", function(d) {
        return d.target.x;
      });
      link.attr("y2", function(d) {
        return d.target.y;
      });
      return node.attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
    });
  };

}).call(this);
